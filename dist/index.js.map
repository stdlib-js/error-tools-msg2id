{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar database = require( '@stdlib/error-tools-database' );\nvar inverse = require( '@stdlib/utils-object-inverse' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar db;\n\n\n// MAIN //\n\n/**\n* Returns a two-character error identifier corresponding to a provided error message.\n*\n* @param {string} msg - error message\n* @throws {TypeError} must provide a string\n* @returns {(string|null)} two-character error identifier\n*\n* @example\n* var v = msg2id( 'invalid option. `%s` option must be an array. Option: `%s`.' );\n* // returns 'GX'\n*/\nfunction msg2id( msg ) {\n\tif ( !isString( msg ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a string. Value: `%s`.', msg ) );\n\t}\n\tif ( !db ) {\n\t\tdb = inverse( database(), {\n\t\t\t'duplicates': false\n\t\t});\n\t}\n\tif ( hasOwnProp( db, msg ) ) {\n\t\treturn db[ msg ];\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = msg2id;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a two-character error identifier corresponding to a provided error message.\n*\n* @module @stdlib/error-tools-msg2id\n*\n* @example\n* var msg2id = require( '@stdlib/error-tools-msg2id' );\n*\n* var v = msg2id( 'invalid option. `%s` option must be an array. Option: `%s`.' );\n* // returns '8t'\n*/\n\n// MODULES //\n\nvar msg2id = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = msg2id;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAa,QAAS,iCAAkC,EACxDC,EAAW,QAAS,8BAA+B,EACnDC,EAAU,QAAS,8BAA+B,EAClDC,EAAS,QAAS,uBAAwB,EAK1CC,EAgBJ,SAASC,EAAQC,EAAM,CACtB,GAAK,CAACP,EAAUO,CAAI,EACnB,MAAM,IAAI,UAAWH,EAAQ,wDAAyDG,CAAI,CAAE,EAO7F,OALMF,IACLA,EAAKF,EAASD,EAAS,EAAG,CACzB,WAAc,EACf,CAAC,GAEGD,EAAYI,EAAIE,CAAI,EACjBF,EAAIE,CAAI,EAET,IACR,CAKAR,EAAO,QAAUO,IC/BjB,IAAIE,EAAS,IAKb,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isString", "hasOwnProp", "database", "inverse", "format", "db", "msg2id", "msg", "msg2id"]
}
